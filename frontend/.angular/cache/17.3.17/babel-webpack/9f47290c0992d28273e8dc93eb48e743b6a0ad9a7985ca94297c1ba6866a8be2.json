{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\n * Servicio para manejar las operaciones de cuentas de ahorros.\n *\n * Este servicio proporciona métodos para comunicarse con la API del backend\n * y manejar todas las operaciones relacionadas con las cuentas:\n * - Obtener todas las cuentas\n * - Crear nuevas cuentas\n * - Actualizar cuentas existentes\n * - Eliminar cuentas\n * - Obtener estadísticas\n *\n * Utiliza RxJS para manejar las respuestas de forma reactiva y\n * BehaviorSubject para mantener el estado de las cuentas en la aplicación.\n */\nexport class CuentaService {\n  /**\n   * Constructor del servicio.\n   *\n   * @param http Cliente HTTP de Angular para realizar peticiones al backend\n   */\n  constructor(http) {\n    this.http = http;\n    /**\n     * URL base de la API del backend.\n     * Se configura para apuntar al servidor Spring Boot.\n     */\n    this.API_URL = 'http://localhost:8080/api';\n    /**\n     * BehaviorSubject para mantener el estado de las cuentas.\n     * Se actualiza automáticamente cuando se realizan operaciones CRUD.\n     */\n    this.cuentasSubject = new BehaviorSubject([]);\n    /**\n     * Observable público para que los componentes se suscriban\n     * y reciban actualizaciones automáticas del estado de las cuentas.\n     */\n    this.cuentas$ = this.cuentasSubject.asObservable();\n    // Cargar las cuentas al inicializar el servicio\n    this.cargarCuentas();\n  }\n  /**\n   * Obtiene todas las cuentas del sistema.\n   *\n   * @returns Observable con la lista de cuentas\n   */\n  obtenerCuentas() {\n    return this.http.get(`${this.API_URL}/cuentas`).pipe(tap(cuentas => {\n      console.log('Cuentas obtenidas:', cuentas);\n      this.cuentasSubject.next(cuentas);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene una cuenta específica por su ID.\n   *\n   * @param id ID de la cuenta a obtener\n   * @returns Observable con la cuenta encontrada\n   */\n  obtenerCuentaPorId(id) {\n    return this.http.get(`${this.API_URL}/cuentas/${id}`).pipe(tap(cuenta => console.log('Cuenta obtenida:', cuenta)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene una cuenta específica por su número de cuenta.\n   *\n   * @param numeroCuenta Número de cuenta a buscar\n   * @returns Observable con la cuenta encontrada\n   */\n  obtenerCuentaPorNumero(numeroCuenta) {\n    return this.http.get(`${this.API_URL}/cuentas/numero/${numeroCuenta}`).pipe(tap(cuenta => console.log('Cuenta obtenida por número:', cuenta)), catchError(this.manejarError));\n  }\n  /**\n   * Busca cuentas por nombre del titular.\n   *\n   * @param titular Nombre del titular (parcial)\n   * @returns Observable con la lista de cuentas que coinciden\n   */\n  buscarCuentasPorTitular(titular) {\n    return this.http.get(`${this.API_URL}/cuentas/buscar?titular=${titular}`).pipe(tap(cuentas => console.log('Cuentas encontradas por titular:', cuentas)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene todas las cuentas activas.\n   *\n   * @returns Observable con la lista de cuentas activas\n   */\n  obtenerCuentasActivas() {\n    return this.http.get(`${this.API_URL}/cuentas/activas`).pipe(tap(cuentas => console.log('Cuentas activas obtenidas:', cuentas)), catchError(this.manejarError));\n  }\n  /**\n   * Crea una nueva cuenta de ahorros.\n   *\n   * @param nuevaCuenta Datos de la nueva cuenta\n   * @returns Observable con la cuenta creada\n   */\n  crearCuenta(nuevaCuenta) {\n    return this.http.post(`${this.API_URL}/cuentas`, nuevaCuenta).pipe(tap(cuenta => {\n      console.log('Cuenta creada:', cuenta);\n      // Actualizar la lista de cuentas\n      const cuentasActuales = this.cuentasSubject.value;\n      this.cuentasSubject.next([...cuentasActuales, cuenta]);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Actualiza una cuenta existente.\n   *\n   * @param id ID de la cuenta a actualizar\n   * @param datosActualizacion Datos a actualizar\n   * @returns Observable con la cuenta actualizada\n   */\n  actualizarCuenta(id, datosActualizacion) {\n    return this.http.put(`${this.API_URL}/cuentas/${id}`, datosActualizacion).pipe(tap(cuenta => {\n      console.log('Cuenta actualizada:', cuenta);\n      // Actualizar la cuenta en la lista\n      const cuentasActuales = this.cuentasSubject.value;\n      const cuentasActualizadas = cuentasActuales.map(c => c.id === id ? cuenta : c);\n      this.cuentasSubject.next(cuentasActualizadas);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Elimina una cuenta.\n   *\n   * @param id ID de la cuenta a eliminar\n   * @returns Observable que se completa cuando la cuenta se elimina\n   */\n  eliminarCuenta(id) {\n    return this.http.delete(`${this.API_URL}/cuentas/${id}`).pipe(tap(() => {\n      console.log('Cuenta eliminada con ID:', id);\n      // Remover la cuenta de la lista\n      const cuentasActuales = this.cuentasSubject.value;\n      const cuentasFiltradas = cuentasActuales.filter(c => c.id !== id);\n      this.cuentasSubject.next(cuentasFiltradas);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene estadísticas de las cuentas.\n   *\n   * @returns Observable con las estadísticas de cuentas\n   */\n  obtenerEstadisticas() {\n    return this.http.get(`${this.API_URL}/cuentas/estadisticas`).pipe(map(response => ({\n      totalCuentas: response[0],\n      cuentasActivas: response[1],\n      saldoTotal: response[2]\n    })), tap(estadisticas => console.log('Estadísticas obtenidas:', estadisticas)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene cuentas ordenadas por saldo (mayor a menor).\n   *\n   * @returns Observable con la lista de cuentas ordenadas\n   */\n  obtenerCuentasOrdenadasPorSaldo() {\n    return this.http.get(`${this.API_URL}/cuentas/ordenadas/saldo`).pipe(tap(cuentas => console.log('Cuentas ordenadas por saldo:', cuentas)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene cuentas con saldo superior al promedio.\n   *\n   * @returns Observable con la lista de cuentas con saldo superior al promedio\n   */\n  obtenerCuentasConSaldoSuperiorAlPromedio() {\n    return this.http.get(`${this.API_URL}/cuentas/superior-promedio`).pipe(tap(cuentas => console.log('Cuentas con saldo superior al promedio:', cuentas)), catchError(this.manejarError));\n  }\n  /**\n   * Carga las cuentas al inicializar el servicio.\n   * Se llama automáticamente en el constructor.\n   */\n  cargarCuentas() {\n    this.obtenerCuentas().subscribe({\n      error: error => console.error('Error al cargar cuentas:', error)\n    });\n  }\n  /**\n   * Maneja los errores de las peticiones HTTP.\n   *\n   * @param error Error de la petición HTTP\n   * @returns Observable que emite el error\n   */\n  manejarError(error) {\n    let mensajeError = 'Ocurrió un error desconocido';\n    if (error.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      mensajeError = `Error: ${error.error.message}`;\n    } else {\n      // Error del lado del servidor\n      mensajeError = `Código de error: ${error.status}\\nMensaje: ${error.message}`;\n      if (error.error && error.error.message) {\n        mensajeError = error.error.message;\n      }\n    }\n    console.error('Error en CuentaService:', mensajeError);\n    return throwError(() => new Error(mensajeError));\n  }\n  /**\n   * Obtiene el valor actual de las cuentas.\n   * Útil para componentes que necesitan el valor actual sin suscribirse.\n   *\n   * @returns Lista actual de cuentas\n   */\n  getCuentasActuales() {\n    return this.cuentasSubject.value;\n  }\n  /**\n   * Actualiza manualmente la lista de cuentas.\n   * Útil para sincronizar el estado después de operaciones externas.\n   *\n   * @param cuentas Nueva lista de cuentas\n   */\n  actualizarCuentas(cuentas) {\n    this.cuentasSubject.next(cuentas);\n  }\n  static {\n    this.ɵfac = function CuentaService_Factory(t) {\n      return new (t || CuentaService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CuentaService,\n      factory: CuentaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","BehaviorSubject","catchError","tap","map","CuentaService","constructor","http","API_URL","cuentasSubject","cuentas$","asObservable","cargarCuentas","obtenerCuentas","get","pipe","cuentas","console","log","next","manejarError","obtenerCuentaPorId","id","cuenta","obtenerCuentaPorNumero","numeroCuenta","buscarCuentasPorTitular","titular","obtenerCuentasActivas","crearCuenta","nuevaCuenta","post","cuentasActuales","value","actualizarCuenta","datosActualizacion","put","cuentasActualizadas","c","eliminarCuenta","delete","cuentasFiltradas","filter","obtenerEstadisticas","response","totalCuentas","cuentasActivas","saldoTotal","estadisticas","obtenerCuentasOrdenadasPorSaldo","obtenerCuentasConSaldoSuperiorAlPromedio","subscribe","error","mensajeError","ErrorEvent","message","status","Error","getCuentasActuales","actualizarCuentas","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\billy\\OneDrive\\Escritorio\\Proyecto Angular- Spring\\frontend\\src\\app\\services\\cuenta.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { \r\n  Cuenta, \r\n  NuevaCuenta, \r\n  ActualizarCuenta, \r\n  CuentasResponse, \r\n  EstadisticasResponse,\r\n  EstadisticasCuentas \r\n} from '../models/cuenta.model';\r\n\r\n/**\r\n * Servicio para manejar las operaciones de cuentas de ahorros.\r\n * \r\n * Este servicio proporciona métodos para comunicarse con la API del backend\r\n * y manejar todas las operaciones relacionadas con las cuentas:\r\n * - Obtener todas las cuentas\r\n * - Crear nuevas cuentas\r\n * - Actualizar cuentas existentes\r\n * - Eliminar cuentas\r\n * - Obtener estadísticas\r\n * \r\n * Utiliza RxJS para manejar las respuestas de forma reactiva y\r\n * BehaviorSubject para mantener el estado de las cuentas en la aplicación.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CuentaService {\r\n\r\n  /**\r\n   * URL base de la API del backend.\r\n   * Se configura para apuntar al servidor Spring Boot.\r\n   */\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  /**\r\n   * BehaviorSubject para mantener el estado de las cuentas.\r\n   * Se actualiza automáticamente cuando se realizan operaciones CRUD.\r\n   */\r\n  private cuentasSubject = new BehaviorSubject<Cuenta[]>([]);\r\n\r\n  /**\r\n   * Observable público para que los componentes se suscriban\r\n   * y reciban actualizaciones automáticas del estado de las cuentas.\r\n   */\r\n  public cuentas$ = this.cuentasSubject.asObservable();\r\n\r\n  /**\r\n   * Constructor del servicio.\r\n   * \r\n   * @param http Cliente HTTP de Angular para realizar peticiones al backend\r\n   */\r\n  constructor(private http: HttpClient) {\r\n    // Cargar las cuentas al inicializar el servicio\r\n    this.cargarCuentas();\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las cuentas del sistema.\r\n   * \r\n   * @returns Observable con la lista de cuentas\r\n   */\r\n  obtenerCuentas(): Observable<Cuenta[]> {\r\n    return this.http.get<CuentasResponse>(`${this.API_URL}/cuentas`)\r\n      .pipe(\r\n        tap(cuentas => {\r\n          console.log('Cuentas obtenidas:', cuentas);\r\n          this.cuentasSubject.next(cuentas);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene una cuenta específica por su ID.\r\n   * \r\n   * @param id ID de la cuenta a obtener\r\n   * @returns Observable con la cuenta encontrada\r\n   */\r\n  obtenerCuentaPorId(id: number): Observable<Cuenta> {\r\n    return this.http.get<Cuenta>(`${this.API_URL}/cuentas/${id}`)\r\n      .pipe(\r\n        tap(cuenta => console.log('Cuenta obtenida:', cuenta)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene una cuenta específica por su número de cuenta.\r\n   * \r\n   * @param numeroCuenta Número de cuenta a buscar\r\n   * @returns Observable con la cuenta encontrada\r\n   */\r\n  obtenerCuentaPorNumero(numeroCuenta: string): Observable<Cuenta> {\r\n    return this.http.get<Cuenta>(`${this.API_URL}/cuentas/numero/${numeroCuenta}`)\r\n      .pipe(\r\n        tap(cuenta => console.log('Cuenta obtenida por número:', cuenta)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Busca cuentas por nombre del titular.\r\n   * \r\n   * @param titular Nombre del titular (parcial)\r\n   * @returns Observable con la lista de cuentas que coinciden\r\n   */\r\n  buscarCuentasPorTitular(titular: string): Observable<Cuenta[]> {\r\n    return this.http.get<CuentasResponse>(`${this.API_URL}/cuentas/buscar?titular=${titular}`)\r\n      .pipe(\r\n        tap(cuentas => console.log('Cuentas encontradas por titular:', cuentas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las cuentas activas.\r\n   * \r\n   * @returns Observable con la lista de cuentas activas\r\n   */\r\n  obtenerCuentasActivas(): Observable<Cuenta[]> {\r\n    return this.http.get<CuentasResponse>(`${this.API_URL}/cuentas/activas`)\r\n      .pipe(\r\n        tap(cuentas => console.log('Cuentas activas obtenidas:', cuentas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Crea una nueva cuenta de ahorros.\r\n   * \r\n   * @param nuevaCuenta Datos de la nueva cuenta\r\n   * @returns Observable con la cuenta creada\r\n   */\r\n  crearCuenta(nuevaCuenta: NuevaCuenta): Observable<Cuenta> {\r\n    return this.http.post<Cuenta>(`${this.API_URL}/cuentas`, nuevaCuenta)\r\n      .pipe(\r\n        tap(cuenta => {\r\n          console.log('Cuenta creada:', cuenta);\r\n          // Actualizar la lista de cuentas\r\n          const cuentasActuales = this.cuentasSubject.value;\r\n          this.cuentasSubject.next([...cuentasActuales, cuenta]);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Actualiza una cuenta existente.\r\n   * \r\n   * @param id ID de la cuenta a actualizar\r\n   * @param datosActualizacion Datos a actualizar\r\n   * @returns Observable con la cuenta actualizada\r\n   */\r\n  actualizarCuenta(id: number, datosActualizacion: ActualizarCuenta): Observable<Cuenta> {\r\n    return this.http.put<Cuenta>(`${this.API_URL}/cuentas/${id}`, datosActualizacion)\r\n      .pipe(\r\n        tap(cuenta => {\r\n          console.log('Cuenta actualizada:', cuenta);\r\n          // Actualizar la cuenta en la lista\r\n          const cuentasActuales = this.cuentasSubject.value;\r\n          const cuentasActualizadas = cuentasActuales.map(c => \r\n            c.id === id ? cuenta : c\r\n          );\r\n          this.cuentasSubject.next(cuentasActualizadas);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Elimina una cuenta.\r\n   * \r\n   * @param id ID de la cuenta a eliminar\r\n   * @returns Observable que se completa cuando la cuenta se elimina\r\n   */\r\n  eliminarCuenta(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.API_URL}/cuentas/${id}`)\r\n      .pipe(\r\n        tap(() => {\r\n          console.log('Cuenta eliminada con ID:', id);\r\n          // Remover la cuenta de la lista\r\n          const cuentasActuales = this.cuentasSubject.value;\r\n          const cuentasFiltradas = cuentasActuales.filter(c => c.id !== id);\r\n          this.cuentasSubject.next(cuentasFiltradas);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de las cuentas.\r\n   * \r\n   * @returns Observable con las estadísticas de cuentas\r\n   */\r\n  obtenerEstadisticas(): Observable<EstadisticasCuentas> {\r\n    return this.http.get<EstadisticasResponse>(`${this.API_URL}/cuentas/estadisticas`)\r\n      .pipe(\r\n        map(response => ({\r\n          totalCuentas: response[0],\r\n          cuentasActivas: response[1],\r\n          saldoTotal: response[2]\r\n        })),\r\n        tap(estadisticas => console.log('Estadísticas obtenidas:', estadisticas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene cuentas ordenadas por saldo (mayor a menor).\r\n   * \r\n   * @returns Observable con la lista de cuentas ordenadas\r\n   */\r\n  obtenerCuentasOrdenadasPorSaldo(): Observable<Cuenta[]> {\r\n    return this.http.get<CuentasResponse>(`${this.API_URL}/cuentas/ordenadas/saldo`)\r\n      .pipe(\r\n        tap(cuentas => console.log('Cuentas ordenadas por saldo:', cuentas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene cuentas con saldo superior al promedio.\r\n   * \r\n   * @returns Observable con la lista de cuentas con saldo superior al promedio\r\n   */\r\n  obtenerCuentasConSaldoSuperiorAlPromedio(): Observable<Cuenta[]> {\r\n    return this.http.get<CuentasResponse>(`${this.API_URL}/cuentas/superior-promedio`)\r\n      .pipe(\r\n        tap(cuentas => console.log('Cuentas con saldo superior al promedio:', cuentas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Carga las cuentas al inicializar el servicio.\r\n   * Se llama automáticamente en el constructor.\r\n   */\r\n  private cargarCuentas(): void {\r\n    this.obtenerCuentas().subscribe({\r\n      error: (error) => console.error('Error al cargar cuentas:', error)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Maneja los errores de las peticiones HTTP.\r\n   * \r\n   * @param error Error de la petición HTTP\r\n   * @returns Observable que emite el error\r\n   */\r\n  private manejarError(error: HttpErrorResponse): Observable<never> {\r\n    let mensajeError = 'Ocurrió un error desconocido';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Error del lado del cliente\r\n      mensajeError = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Error del lado del servidor\r\n      mensajeError = `Código de error: ${error.status}\\nMensaje: ${error.message}`;\r\n      \r\n      if (error.error && error.error.message) {\r\n        mensajeError = error.error.message;\r\n      }\r\n    }\r\n\r\n    console.error('Error en CuentaService:', mensajeError);\r\n    return throwError(() => new Error(mensajeError));\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual de las cuentas.\r\n   * Útil para componentes que necesitan el valor actual sin suscribirse.\r\n   * \r\n   * @returns Lista actual de cuentas\r\n   */\r\n  getCuentasActuales(): Cuenta[] {\r\n    return this.cuentasSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Actualiza manualmente la lista de cuentas.\r\n   * Útil para sincronizar el estado después de operaciones externas.\r\n   * \r\n   * @param cuentas Nueva lista de cuentas\r\n   */\r\n  actualizarCuentas(cuentas: Cuenta[]): void {\r\n    this.cuentasSubject.next(cuentas);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}