{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\n * Servicio para manejar las operaciones de transacciones de cuentas de ahorros.\n *\n * Este servicio proporciona métodos para comunicarse con la API del backend\n * y manejar todas las operaciones relacionadas con las transacciones:\n * - Realizar depósitos\n * - Realizar retiros\n * - Obtener historial de transacciones\n * - Obtener estadísticas de transacciones\n *\n * Utiliza RxJS para manejar las respuestas de forma reactiva y\n * BehaviorSubject para mantener el estado de las transacciones en la aplicación.\n */\nexport class TransaccionService {\n  /**\n   * Constructor del servicio.\n   *\n   * @param http Cliente HTTP de Angular para realizar peticiones al backend\n   */\n  constructor(http) {\n    this.http = http;\n    /**\n     * URL base de la API del backend.\n     * Se configura para apuntar al servidor Spring Boot.\n     */\n    this.API_URL = 'http://localhost:8080/api';\n    /**\n     * BehaviorSubject para mantener el estado de las transacciones.\n     * Se actualiza automáticamente cuando se realizan operaciones.\n     */\n    this.transaccionesSubject = new BehaviorSubject([]);\n    /**\n     * Observable público para que los componentes se suscriban\n     * y reciban actualizaciones automáticas del estado de las transacciones.\n     */\n    this.transacciones$ = this.transaccionesSubject.asObservable();\n    // Cargar las transacciones al inicializar el servicio\n    this.cargarTransacciones();\n  }\n  /**\n   * Obtiene todas las transacciones del sistema.\n   *\n   * @returns Observable con la lista de transacciones\n   */\n  obtenerTransacciones() {\n    return this.http.get(`${this.API_URL}/transacciones`).pipe(tap(transacciones => {\n      console.log('Transacciones obtenidas:', transacciones);\n      this.transaccionesSubject.next(transacciones);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene las transacciones de una cuenta específica.\n   *\n   * @param cuentaId ID de la cuenta\n   * @returns Observable con la lista de transacciones de la cuenta\n   */\n  obtenerTransaccionesPorCuenta(cuentaId) {\n    return this.http.get(`${this.API_URL}/transacciones/cuenta/${cuentaId}`).pipe(tap(transacciones => console.log('Transacciones de cuenta obtenidas:', transacciones)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene una transacción específica por su ID.\n   *\n   * @param id ID de la transacción\n   * @returns Observable con la transacción encontrada\n   */\n  obtenerTransaccionPorId(id) {\n    return this.http.get(`${this.API_URL}/transacciones/${id}`).pipe(tap(transaccion => console.log('Transacción obtenida:', transaccion)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene transacciones por tipo.\n   *\n   * @param tipo Tipo de transacción (DEPOSITO o RETIRO)\n   * @returns Observable con la lista de transacciones del tipo especificado\n   */\n  obtenerTransaccionesPorTipo(tipo) {\n    return this.http.get(`${this.API_URL}/transacciones/tipo/${tipo}`).pipe(tap(transacciones => console.log('Transacciones por tipo obtenidas:', transacciones)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene transacciones de una cuenta por tipo.\n   *\n   * @param cuentaId ID de la cuenta\n   * @param tipo Tipo de transacción\n   * @returns Observable con la lista de transacciones de la cuenta del tipo especificado\n   */\n  obtenerTransaccionesPorCuentaYTipo(cuentaId, tipo) {\n    return this.http.get(`${this.API_URL}/transacciones/cuenta/${cuentaId}/tipo/${tipo}`).pipe(tap(transacciones => console.log('Transacciones de cuenta por tipo obtenidas:', transacciones)), catchError(this.manejarError));\n  }\n  /**\n   * Realiza un depósito en una cuenta.\n   *\n   * @param nuevaTransaccion Datos de la transacción de depósito\n   * @returns Observable con la transacción creada\n   */\n  realizarDeposito(nuevaTransaccion) {\n    return this.http.post(`${this.API_URL}/transacciones/deposito`, nuevaTransaccion).pipe(tap(transaccion => {\n      console.log('Depósito realizado:', transaccion);\n      // Actualizar la lista de transacciones\n      const transaccionesActuales = this.transaccionesSubject.value;\n      this.transaccionesSubject.next([transaccion, ...transaccionesActuales]);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Realiza un retiro de una cuenta.\n   *\n   * @param nuevaTransaccion Datos de la transacción de retiro\n   * @returns Observable con la transacción creada\n   */\n  realizarRetiro(nuevaTransaccion) {\n    return this.http.post(`${this.API_URL}/transacciones/retiro`, nuevaTransaccion).pipe(tap(transaccion => {\n      console.log('Retiro realizado:', transaccion);\n      // Actualizar la lista de transacciones\n      const transaccionesActuales = this.transaccionesSubject.value;\n      this.transaccionesSubject.next([transaccion, ...transaccionesActuales]);\n    }), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene estadísticas de transacciones de una cuenta.\n   *\n   * @param cuentaId ID de la cuenta\n   * @returns Observable con las estadísticas de transacciones de la cuenta\n   */\n  obtenerEstadisticasTransacciones(cuentaId) {\n    return this.http.get(`${this.API_URL}/transacciones/estadisticas/cuenta/${cuentaId}`).pipe(map(response => ({\n      totalDepositos: response[0],\n      totalRetiros: response[1],\n      totalTransacciones: response[2]\n    })), tap(estadisticas => console.log('Estadísticas de transacciones obtenidas:', estadisticas)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene el total de depósitos de una cuenta.\n   *\n   * @param cuentaId ID de la cuenta\n   * @returns Observable con el total de depósitos\n   */\n  obtenerTotalDepositos(cuentaId) {\n    return this.http.get(`${this.API_URL}/transacciones/depositos/cuenta/${cuentaId}`).pipe(tap(total => console.log('Total de depósitos obtenido:', total)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene el total de retiros de una cuenta.\n   *\n   * @param cuentaId ID de la cuenta\n   * @returns Observable con el total de retiros\n   */\n  obtenerTotalRetiros(cuentaId) {\n    return this.http.get(`${this.API_URL}/transacciones/retiros/cuenta/${cuentaId}`).pipe(tap(total => console.log('Total de retiros obtenido:', total)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene las transacciones más recientes.\n   *\n   * @param limit Número máximo de transacciones a retornar (por defecto 10)\n   * @returns Observable con la lista de transacciones más recientes\n   */\n  obtenerTransaccionesRecientes(limit = 10) {\n    return this.http.get(`${this.API_URL}/transacciones/recientes?limit=${limit}`).pipe(tap(transacciones => console.log('Transacciones recientes obtenidas:', transacciones)), catchError(this.manejarError));\n  }\n  /**\n   * Obtiene estadísticas globales de transacciones.\n   *\n   * @returns Observable con las estadísticas globales de transacciones\n   */\n  obtenerEstadisticasGlobales() {\n    return this.http.get(`${this.API_URL}/transacciones/estadisticas/globales`).pipe(map(response => ({\n      totalDepositos: response[0],\n      totalRetiros: response[1],\n      totalTransacciones: response[2]\n    })), tap(estadisticas => console.log('Estadísticas globales obtenidas:', estadisticas)), catchError(this.manejarError));\n  }\n  /**\n   * Carga las transacciones al inicializar el servicio.\n   * Se llama automáticamente en el constructor.\n   */\n  cargarTransacciones() {\n    this.obtenerTransacciones().subscribe({\n      error: error => console.error('Error al cargar transacciones:', error)\n    });\n  }\n  /**\n   * Maneja los errores de las peticiones HTTP.\n   *\n   * @param error Error de la petición HTTP\n   * @returns Observable que emite el error\n   */\n  manejarError(error) {\n    let mensajeError = 'Ocurrió un error desconocido';\n    if (error.error instanceof ErrorEvent) {\n      // Error del lado del cliente\n      mensajeError = `Error: ${error.error.message}`;\n    } else {\n      // Error del lado del servidor\n      mensajeError = `Código de error: ${error.status}\\nMensaje: ${error.message}`;\n      if (error.error && error.error.message) {\n        mensajeError = error.error.message;\n      }\n    }\n    console.error('Error en TransaccionService:', mensajeError);\n    return throwError(() => new Error(mensajeError));\n  }\n  /**\n   * Obtiene el valor actual de las transacciones.\n   * Útil para componentes que necesitan el valor actual sin suscribirse.\n   *\n   * @returns Lista actual de transacciones\n   */\n  getTransaccionesActuales() {\n    return this.transaccionesSubject.value;\n  }\n  /**\n   * Actualiza manualmente la lista de transacciones.\n   * Útil para sincronizar el estado después de operaciones externas.\n   *\n   * @param transacciones Nueva lista de transacciones\n   */\n  actualizarTransacciones(transacciones) {\n    this.transaccionesSubject.next(transacciones);\n  }\n  /**\n   * Filtra las transacciones por tipo.\n   *\n   * @param transacciones Lista de transacciones a filtrar\n   * @param tipo Tipo de transacción a filtrar\n   * @returns Lista filtrada de transacciones\n   */\n  filtrarTransaccionesPorTipo(transacciones, tipo) {\n    return transacciones.filter(transaccion => transaccion.tipo === tipo);\n  }\n  /**\n   * Filtra las transacciones por cuenta.\n   *\n   * @param transacciones Lista de transacciones a filtrar\n   * @param cuentaId ID de la cuenta a filtrar\n   * @returns Lista filtrada de transacciones\n   */\n  filtrarTransaccionesPorCuenta(transacciones, cuentaId) {\n    return transacciones.filter(transaccion => transaccion.cuentaId === cuentaId);\n  }\n  /**\n   * Ordena las transacciones por fecha (más recientes primero).\n   *\n   * @param transacciones Lista de transacciones a ordenar\n   * @returns Lista ordenada de transacciones\n   */\n  ordenarTransaccionesPorFecha(transacciones) {\n    return transacciones.sort((a, b) => new Date(b.fechaTransaccion).getTime() - new Date(a.fechaTransaccion).getTime());\n  }\n  static {\n    this.ɵfac = function TransaccionService_Factory(t) {\n      return new (t || TransaccionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransaccionService,\n      factory: TransaccionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","BehaviorSubject","catchError","tap","map","TransaccionService","constructor","http","API_URL","transaccionesSubject","transacciones$","asObservable","cargarTransacciones","obtenerTransacciones","get","pipe","transacciones","console","log","next","manejarError","obtenerTransaccionesPorCuenta","cuentaId","obtenerTransaccionPorId","id","transaccion","obtenerTransaccionesPorTipo","tipo","obtenerTransaccionesPorCuentaYTipo","realizarDeposito","nuevaTransaccion","post","transaccionesActuales","value","realizarRetiro","obtenerEstadisticasTransacciones","response","totalDepositos","totalRetiros","totalTransacciones","estadisticas","obtenerTotalDepositos","total","obtenerTotalRetiros","obtenerTransaccionesRecientes","limit","obtenerEstadisticasGlobales","subscribe","error","mensajeError","ErrorEvent","message","status","Error","getTransaccionesActuales","actualizarTransacciones","filtrarTransaccionesPorTipo","filter","filtrarTransaccionesPorCuenta","ordenarTransaccionesPorFecha","sort","a","b","Date","fechaTransaccion","getTime","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\billy\\OneDrive\\Escritorio\\Proyecto Angular- Spring\\frontend\\src\\app\\services\\transaccion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { \r\n  Transaccion, \r\n  NuevaTransaccion, \r\n  TransaccionesResponse, \r\n  EstadisticasTransaccionesResponse,\r\n  EstadisticasGlobalesResponse,\r\n  EstadisticasTransacciones,\r\n  EstadisticasGlobales,\r\n  TipoTransaccion \r\n} from '../models/transaccion.model';\r\n\r\n/**\r\n * Servicio para manejar las operaciones de transacciones de cuentas de ahorros.\r\n * \r\n * Este servicio proporciona métodos para comunicarse con la API del backend\r\n * y manejar todas las operaciones relacionadas con las transacciones:\r\n * - Realizar depósitos\r\n * - Realizar retiros\r\n * - Obtener historial de transacciones\r\n * - Obtener estadísticas de transacciones\r\n * \r\n * Utiliza RxJS para manejar las respuestas de forma reactiva y\r\n * BehaviorSubject para mantener el estado de las transacciones en la aplicación.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TransaccionService {\r\n\r\n  /**\r\n   * URL base de la API del backend.\r\n   * Se configura para apuntar al servidor Spring Boot.\r\n   */\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  /**\r\n   * BehaviorSubject para mantener el estado de las transacciones.\r\n   * Se actualiza automáticamente cuando se realizan operaciones.\r\n   */\r\n  private transaccionesSubject = new BehaviorSubject<Transaccion[]>([]);\r\n\r\n  /**\r\n   * Observable público para que los componentes se suscriban\r\n   * y reciban actualizaciones automáticas del estado de las transacciones.\r\n   */\r\n  public transacciones$ = this.transaccionesSubject.asObservable();\r\n\r\n  /**\r\n   * Constructor del servicio.\r\n   * \r\n   * @param http Cliente HTTP de Angular para realizar peticiones al backend\r\n   */\r\n  constructor(private http: HttpClient) {\r\n    // Cargar las transacciones al inicializar el servicio\r\n    this.cargarTransacciones();\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las transacciones del sistema.\r\n   * \r\n   * @returns Observable con la lista de transacciones\r\n   */\r\n  obtenerTransacciones(): Observable<Transaccion[]> {\r\n    return this.http.get<TransaccionesResponse>(`${this.API_URL}/transacciones`)\r\n      .pipe(\r\n        tap(transacciones => {\r\n          console.log('Transacciones obtenidas:', transacciones);\r\n          this.transaccionesSubject.next(transacciones);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene las transacciones de una cuenta específica.\r\n   * \r\n   * @param cuentaId ID de la cuenta\r\n   * @returns Observable con la lista de transacciones de la cuenta\r\n   */\r\n  obtenerTransaccionesPorCuenta(cuentaId: number): Observable<Transaccion[]> {\r\n    return this.http.get<TransaccionesResponse>(`${this.API_URL}/transacciones/cuenta/${cuentaId}`)\r\n      .pipe(\r\n        tap(transacciones => console.log('Transacciones de cuenta obtenidas:', transacciones)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene una transacción específica por su ID.\r\n   * \r\n   * @param id ID de la transacción\r\n   * @returns Observable con la transacción encontrada\r\n   */\r\n  obtenerTransaccionPorId(id: number): Observable<Transaccion> {\r\n    return this.http.get<Transaccion>(`${this.API_URL}/transacciones/${id}`)\r\n      .pipe(\r\n        tap(transaccion => console.log('Transacción obtenida:', transaccion)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene transacciones por tipo.\r\n   * \r\n   * @param tipo Tipo de transacción (DEPOSITO o RETIRO)\r\n   * @returns Observable con la lista de transacciones del tipo especificado\r\n   */\r\n  obtenerTransaccionesPorTipo(tipo: string): Observable<Transaccion[]> {\r\n    return this.http.get<TransaccionesResponse>(`${this.API_URL}/transacciones/tipo/${tipo}`)\r\n      .pipe(\r\n        tap(transacciones => console.log('Transacciones por tipo obtenidas:', transacciones)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene transacciones de una cuenta por tipo.\r\n   * \r\n   * @param cuentaId ID de la cuenta\r\n   * @param tipo Tipo de transacción\r\n   * @returns Observable con la lista de transacciones de la cuenta del tipo especificado\r\n   */\r\n  obtenerTransaccionesPorCuentaYTipo(cuentaId: number, tipo: string): Observable<Transaccion[]> {\r\n    return this.http.get<TransaccionesResponse>(`${this.API_URL}/transacciones/cuenta/${cuentaId}/tipo/${tipo}`)\r\n      .pipe(\r\n        tap(transacciones => console.log('Transacciones de cuenta por tipo obtenidas:', transacciones)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Realiza un depósito en una cuenta.\r\n   * \r\n   * @param nuevaTransaccion Datos de la transacción de depósito\r\n   * @returns Observable con la transacción creada\r\n   */\r\n  realizarDeposito(nuevaTransaccion: NuevaTransaccion): Observable<Transaccion> {\r\n    return this.http.post<Transaccion>(`${this.API_URL}/transacciones/deposito`, nuevaTransaccion)\r\n      .pipe(\r\n        tap(transaccion => {\r\n          console.log('Depósito realizado:', transaccion);\r\n          // Actualizar la lista de transacciones\r\n          const transaccionesActuales = this.transaccionesSubject.value;\r\n          this.transaccionesSubject.next([transaccion, ...transaccionesActuales]);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Realiza un retiro de una cuenta.\r\n   * \r\n   * @param nuevaTransaccion Datos de la transacción de retiro\r\n   * @returns Observable con la transacción creada\r\n   */\r\n  realizarRetiro(nuevaTransaccion: NuevaTransaccion): Observable<Transaccion> {\r\n    return this.http.post<Transaccion>(`${this.API_URL}/transacciones/retiro`, nuevaTransaccion)\r\n      .pipe(\r\n        tap(transaccion => {\r\n          console.log('Retiro realizado:', transaccion);\r\n          // Actualizar la lista de transacciones\r\n          const transaccionesActuales = this.transaccionesSubject.value;\r\n          this.transaccionesSubject.next([transaccion, ...transaccionesActuales]);\r\n        }),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de transacciones de una cuenta.\r\n   * \r\n   * @param cuentaId ID de la cuenta\r\n   * @returns Observable con las estadísticas de transacciones de la cuenta\r\n   */\r\n  obtenerEstadisticasTransacciones(cuentaId: number): Observable<EstadisticasTransacciones> {\r\n    return this.http.get<EstadisticasTransaccionesResponse>(`${this.API_URL}/transacciones/estadisticas/cuenta/${cuentaId}`)\r\n      .pipe(\r\n        map(response => ({\r\n          totalDepositos: response[0],\r\n          totalRetiros: response[1],\r\n          totalTransacciones: response[2]\r\n        })),\r\n        tap(estadisticas => console.log('Estadísticas de transacciones obtenidas:', estadisticas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el total de depósitos de una cuenta.\r\n   * \r\n   * @param cuentaId ID de la cuenta\r\n   * @returns Observable con el total de depósitos\r\n   */\r\n  obtenerTotalDepositos(cuentaId: number): Observable<string> {\r\n    return this.http.get<string>(`${this.API_URL}/transacciones/depositos/cuenta/${cuentaId}`)\r\n      .pipe(\r\n        tap(total => console.log('Total de depósitos obtenido:', total)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el total de retiros de una cuenta.\r\n   * \r\n   * @param cuentaId ID de la cuenta\r\n   * @returns Observable con el total de retiros\r\n   */\r\n  obtenerTotalRetiros(cuentaId: number): Observable<string> {\r\n    return this.http.get<string>(`${this.API_URL}/transacciones/retiros/cuenta/${cuentaId}`)\r\n      .pipe(\r\n        tap(total => console.log('Total de retiros obtenido:', total)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene las transacciones más recientes.\r\n   * \r\n   * @param limit Número máximo de transacciones a retornar (por defecto 10)\r\n   * @returns Observable con la lista de transacciones más recientes\r\n   */\r\n  obtenerTransaccionesRecientes(limit: number = 10): Observable<Transaccion[]> {\r\n    return this.http.get<TransaccionesResponse>(`${this.API_URL}/transacciones/recientes?limit=${limit}`)\r\n      .pipe(\r\n        tap(transacciones => console.log('Transacciones recientes obtenidas:', transacciones)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas globales de transacciones.\r\n   * \r\n   * @returns Observable con las estadísticas globales de transacciones\r\n   */\r\n  obtenerEstadisticasGlobales(): Observable<EstadisticasGlobales> {\r\n    return this.http.get<EstadisticasGlobalesResponse>(`${this.API_URL}/transacciones/estadisticas/globales`)\r\n      .pipe(\r\n        map(response => ({\r\n          totalDepositos: response[0],\r\n          totalRetiros: response[1],\r\n          totalTransacciones: response[2]\r\n        })),\r\n        tap(estadisticas => console.log('Estadísticas globales obtenidas:', estadisticas)),\r\n        catchError(this.manejarError)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Carga las transacciones al inicializar el servicio.\r\n   * Se llama automáticamente en el constructor.\r\n   */\r\n  private cargarTransacciones(): void {\r\n    this.obtenerTransacciones().subscribe({\r\n      error: (error) => console.error('Error al cargar transacciones:', error)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Maneja los errores de las peticiones HTTP.\r\n   * \r\n   * @param error Error de la petición HTTP\r\n   * @returns Observable que emite el error\r\n   */\r\n  private manejarError(error: HttpErrorResponse): Observable<never> {\r\n    let mensajeError = 'Ocurrió un error desconocido';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Error del lado del cliente\r\n      mensajeError = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Error del lado del servidor\r\n      mensajeError = `Código de error: ${error.status}\\nMensaje: ${error.message}`;\r\n      \r\n      if (error.error && error.error.message) {\r\n        mensajeError = error.error.message;\r\n      }\r\n    }\r\n\r\n    console.error('Error en TransaccionService:', mensajeError);\r\n    return throwError(() => new Error(mensajeError));\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual de las transacciones.\r\n   * Útil para componentes que necesitan el valor actual sin suscribirse.\r\n   * \r\n   * @returns Lista actual de transacciones\r\n   */\r\n  getTransaccionesActuales(): Transaccion[] {\r\n    return this.transaccionesSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Actualiza manualmente la lista de transacciones.\r\n   * Útil para sincronizar el estado después de operaciones externas.\r\n   * \r\n   * @param transacciones Nueva lista de transacciones\r\n   */\r\n  actualizarTransacciones(transacciones: Transaccion[]): void {\r\n    this.transaccionesSubject.next(transacciones);\r\n  }\r\n\r\n  /**\r\n   * Filtra las transacciones por tipo.\r\n   * \r\n   * @param transacciones Lista de transacciones a filtrar\r\n   * @param tipo Tipo de transacción a filtrar\r\n   * @returns Lista filtrada de transacciones\r\n   */\r\n  filtrarTransaccionesPorTipo(transacciones: Transaccion[], tipo: TipoTransaccion): Transaccion[] {\r\n    return transacciones.filter(transaccion => transaccion.tipo === tipo);\r\n  }\r\n\r\n  /**\r\n   * Filtra las transacciones por cuenta.\r\n   * \r\n   * @param transacciones Lista de transacciones a filtrar\r\n   * @param cuentaId ID de la cuenta a filtrar\r\n   * @returns Lista filtrada de transacciones\r\n   */\r\n  filtrarTransaccionesPorCuenta(transacciones: Transaccion[], cuentaId: number): Transaccion[] {\r\n    return transacciones.filter(transaccion => transaccion.cuentaId === cuentaId);\r\n  }\r\n\r\n  /**\r\n   * Ordena las transacciones por fecha (más recientes primero).\r\n   * \r\n   * @param transacciones Lista de transacciones a ordenar\r\n   * @returns Lista ordenada de transacciones\r\n   */\r\n  ordenarTransaccionesPorFecha(transacciones: Transaccion[]): Transaccion[] {\r\n    return transacciones.sort((a, b) => \r\n      new Date(b.fechaTransaccion).getTime() - new Date(a.fechaTransaccion).getTime()\r\n    );\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}